import * as fs from 'fs';
import * as path from 'path';

const serviceDir = path.join(__dirname, '../src/Services');
const outputFile = path.join(__dirname, '../src/Types/Services.ts');

if (!fs.existsSync(serviceDir)) {
    throw new Error(`Service directory not found: ${serviceDir}`);
}

const files = fs.readdirSync(serviceDir).filter(file => file.endsWith('.ts'));

const entries: { key: string; importName: string; fileName: string }[] = [];

for (const file of files) {
    const baseName = path.basename(file, '.ts'); // Ex: DatastoreService
    entries.push({
        key: baseName,           // Garder le nom complet
        importName: baseName,    // Nom de la classe
        fileName: `../Services/${baseName}` // Chemin d'import
    });
}

const imports = entries
    .map(e => `import { ${e.importName} } from "${e.fileName}";`)
    .join('\n');

const typeEntries = entries
    .map(e => `  ${e.key}: ${e.importName};`)
    .join('\n');

const output = `// This file is auto-generated by generateServiceMap.ts
${imports}

export type Services = {
${typeEntries}
};
`;

fs.writeFileSync(outputFile, output);
console.log(`âœ… ServiceMap generated with ${entries.length} entries.`);
